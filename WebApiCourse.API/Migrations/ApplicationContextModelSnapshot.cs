// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApiCourse.API.Data;

namespace WebApiCourse.API.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebApiCourse.Domain.Models.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataNasc")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Matricula")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Aluno");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(56),
                            DataNasc = new DateTime(2005, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Matricula = "ADBC254845",
                            Nome = "Marta",
                            Sobrenome = "Kent",
                            Telefone = "33225555"
                        },
                        new
                        {
                            Id = 2,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(2178),
                            DataNasc = new DateTime(2005, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Matricula = "ADBC254846",
                            Nome = "Paula",
                            Sobrenome = "Isabela",
                            Telefone = "3354288"
                        },
                        new
                        {
                            Id = 3,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(2595),
                            DataNasc = new DateTime(2002, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Matricula = "ADBC254847",
                            Nome = "Laura",
                            Sobrenome = "Antonia",
                            Telefone = "55668899"
                        },
                        new
                        {
                            Id = 4,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(2939),
                            DataNasc = new DateTime(2005, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Matricula = "ADBC254848",
                            Nome = "Luiza",
                            Sobrenome = "Maria",
                            Telefone = "6565659"
                        },
                        new
                        {
                            Id = 5,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(3232),
                            DataNasc = new DateTime(2002, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Matricula = "ADBC254849",
                            Nome = "Lucas",
                            Sobrenome = "Machado",
                            Telefone = "565685415"
                        },
                        new
                        {
                            Id = 6,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(3567),
                            DataNasc = new DateTime(2005, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Matricula = "ADBC254850",
                            Nome = "Pedro",
                            Sobrenome = "Alvares",
                            Telefone = "456454545"
                        },
                        new
                        {
                            Id = 7,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(3902),
                            DataNasc = new DateTime(2005, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Matricula = "ADBC254851",
                            Nome = "Paulo",
                            Sobrenome = "José",
                            Telefone = "9874512"
                        });
                });

            modelBuilder.Entity("WebApiCourse.Domain.Models.AlunoCurso", b =>
                {
                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataIni")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AlunoId", "CursoId");

                    b.HasIndex("CursoId");

                    b.ToTable("AlunoCurso");
                });

            modelBuilder.Entity("WebApiCourse.Domain.Models.AlunoDisciplina", b =>
                {
                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataIni")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Nota")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("AlunoId", "DisciplinaId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("AlunoDisciplina");

                    b.HasData(
                        new
                        {
                            AlunoId = 1,
                            DisciplinaId = 2,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5173)
                        },
                        new
                        {
                            AlunoId = 1,
                            DisciplinaId = 4,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5781)
                        },
                        new
                        {
                            AlunoId = 1,
                            DisciplinaId = 5,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5810)
                        },
                        new
                        {
                            AlunoId = 2,
                            DisciplinaId = 1,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5812)
                        },
                        new
                        {
                            AlunoId = 2,
                            DisciplinaId = 2,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5814)
                        },
                        new
                        {
                            AlunoId = 2,
                            DisciplinaId = 5,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5820)
                        },
                        new
                        {
                            AlunoId = 3,
                            DisciplinaId = 1,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5822)
                        },
                        new
                        {
                            AlunoId = 3,
                            DisciplinaId = 2,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5824)
                        },
                        new
                        {
                            AlunoId = 3,
                            DisciplinaId = 3,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5877)
                        },
                        new
                        {
                            AlunoId = 4,
                            DisciplinaId = 1,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5882)
                        },
                        new
                        {
                            AlunoId = 4,
                            DisciplinaId = 4,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5884)
                        },
                        new
                        {
                            AlunoId = 4,
                            DisciplinaId = 5,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5886)
                        },
                        new
                        {
                            AlunoId = 5,
                            DisciplinaId = 4,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5887)
                        },
                        new
                        {
                            AlunoId = 5,
                            DisciplinaId = 5,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5889)
                        },
                        new
                        {
                            AlunoId = 6,
                            DisciplinaId = 1,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5891)
                        },
                        new
                        {
                            AlunoId = 6,
                            DisciplinaId = 2,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5893)
                        },
                        new
                        {
                            AlunoId = 6,
                            DisciplinaId = 3,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5895)
                        },
                        new
                        {
                            AlunoId = 6,
                            DisciplinaId = 4,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5898)
                        },
                        new
                        {
                            AlunoId = 7,
                            DisciplinaId = 1,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5900)
                        },
                        new
                        {
                            AlunoId = 7,
                            DisciplinaId = 2,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5902)
                        },
                        new
                        {
                            AlunoId = 7,
                            DisciplinaId = 3,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5903)
                        },
                        new
                        {
                            AlunoId = 7,
                            DisciplinaId = 4,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5905)
                        },
                        new
                        {
                            AlunoId = 7,
                            DisciplinaId = 5,
                            DataIni = new DateTime(2020, 12, 11, 17, 10, 50, 331, DateTimeKind.Local).AddTicks(5907)
                        });
                });

            modelBuilder.Entity("WebApiCourse.Domain.Models.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Curso");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Tecnologia da informação"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Sistemas de Informação"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Ciência da Computação"
                        });
                });

            modelBuilder.Entity("WebApiCourse.Domain.Models.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CH")
                        .HasColumnType("int");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PrerequisitoId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("PrerequisitoId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Disciplina");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CH = 0,
                            CursoId = 1,
                            Nome = "Matemática",
                            ProfessorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CH = 0,
                            CursoId = 2,
                            Nome = "Matemática",
                            ProfessorId = 1
                        },
                        new
                        {
                            Id = 3,
                            CH = 0,
                            CursoId = 3,
                            Nome = "Matemática",
                            ProfessorId = 1
                        },
                        new
                        {
                            Id = 4,
                            CH = 0,
                            CursoId = 1,
                            Nome = "Português",
                            ProfessorId = 3
                        },
                        new
                        {
                            Id = 5,
                            CH = 0,
                            CursoId = 3,
                            Nome = "Português",
                            ProfessorId = 3
                        },
                        new
                        {
                            Id = 6,
                            CH = 0,
                            CursoId = 1,
                            Nome = "Inglês",
                            ProfessorId = 4
                        },
                        new
                        {
                            Id = 7,
                            CH = 0,
                            CursoId = 3,
                            Nome = "Inglês",
                            ProfessorId = 4
                        },
                        new
                        {
                            Id = 8,
                            CH = 0,
                            CursoId = 1,
                            Nome = "Programação",
                            ProfessorId = 5
                        },
                        new
                        {
                            Id = 9,
                            CH = 0,
                            CursoId = 2,
                            Nome = "Programação",
                            ProfessorId = 5
                        },
                        new
                        {
                            Id = 10,
                            CH = 0,
                            CursoId = 3,
                            Nome = "Programação",
                            ProfessorId = 5
                        });
                });

            modelBuilder.Entity("WebApiCourse.Domain.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Registro")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Professor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 321, DateTimeKind.Local).AddTicks(6262),
                            IsActive = true,
                            Nome = "Lauro",
                            Registro = "",
                            Sobrenome = "Oliveira",
                            Telefone = ""
                        },
                        new
                        {
                            Id = 2,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 325, DateTimeKind.Local).AddTicks(1356),
                            IsActive = true,
                            Nome = "Roberto",
                            Registro = "",
                            Sobrenome = "Soares",
                            Telefone = ""
                        },
                        new
                        {
                            Id = 3,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 325, DateTimeKind.Local).AddTicks(1419),
                            IsActive = true,
                            Nome = "Ronaldo",
                            Registro = "",
                            Sobrenome = "Marconi",
                            Telefone = ""
                        },
                        new
                        {
                            Id = 4,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 325, DateTimeKind.Local).AddTicks(1423),
                            IsActive = true,
                            Nome = "Rodrigo",
                            Registro = "",
                            Sobrenome = "Carvalho",
                            Telefone = ""
                        },
                        new
                        {
                            Id = 5,
                            DataInicio = new DateTime(2020, 12, 11, 17, 10, 50, 325, DateTimeKind.Local).AddTicks(1425),
                            IsActive = true,
                            Nome = "Alexandre",
                            Registro = "",
                            Sobrenome = "Montanha",
                            Telefone = ""
                        });
                });

            modelBuilder.Entity("WebApiCourse.Domain.Models.AlunoCurso", b =>
                {
                    b.HasOne("WebApiCourse.Domain.Models.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiCourse.Domain.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApiCourse.Domain.Models.AlunoDisciplina", b =>
                {
                    b.HasOne("WebApiCourse.Domain.Models.Aluno", "Aluno")
                        .WithMany("AlunoDisciplinas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiCourse.Domain.Models.Disciplina", "Disciplina")
                        .WithMany("AlunoDisciplinas")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApiCourse.Domain.Models.Disciplina", b =>
                {
                    b.HasOne("WebApiCourse.Domain.Models.Curso", "Curso")
                        .WithMany("Disciplinas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiCourse.Domain.Models.Disciplina", "Prerequisito")
                        .WithMany()
                        .HasForeignKey("PrerequisitoId");

                    b.HasOne("WebApiCourse.Domain.Models.Professor", "Professor")
                        .WithMany("Disciplinas")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
